name: soft_double
on:
  push:
    branches:
      - '**'
  pull_request:
jobs:
  gcc-clang-native:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++-11, clang++ ]
        standard: [ c++11, c++14, c++17, c++20 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install g++-11
      - name: gcc-clang-native
        run: |
          echo "compile ./soft_double.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -march=native -O3 -std=${{ matrix.standard }} -I. examples/example001_roots_sqrt.cpp examples/example002b_pi_100k.cpp examples/example004_bessel_recur.cpp examples/example005_polylog_series.cpp examples/example007_catalan_series.cpp examples/example010_hypergeometric_2f1.cpp examples/example011_trig_trapezoid_integral.cpp test/test.cpp test/test_soft_double.cpp test/test_soft_double_edge_cases.cpp test/test_soft_double_examples.cpp test/test_soft_double_spot_values.cpp -o soft_double.exe
          ls -la ./soft_double.exe
          ./soft_double.exe
  cmake-linux:
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++, clang++ ]
        include:
          - compiler: g++
            clang_tidy: ""
            container: johnmcfarlane/cnl_ci:gcc-11
          - compiler: clang++
            clang_tidy: "clang-tidy"
            container: johnmcfarlane/cnl_ci:clang-13-libcpp
    runs-on: ubuntu-latest
    container: ${{matrix.container}}
    steps:
      - uses: actions/checkout@v3
      - name: create build directory
        run: mkdir $GITHUB_WORKSPACE/build
      - name: build
        working-directory: build
        run: |
          cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_CXX_STANDARD=20 \
              -DCMAKE_CXX_CLANG_TIDY="${{matrix.clang_tidy}}" \
              -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/.github/toolchains/gcc.cmake \
              -GNinja \
              $GITHUB_WORKSPACE
          cmake --build .
      - name: test
        working-directory: build
        run: ctest --verbose --output-on-failure
  cmake-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: create build directory
        run: mkdir ${{runner.workspace}}/build
      - name: build
        shell: cmd
        working-directory: ${{runner.workspace}}/build
        run: |
          cmake -DCMAKE_CXX_FLAGS="/W4 /WX /EHsc" -DCMAKE_CXX_STANDARD=20 ..\soft_double
          cmake --build . --config Release
      - name: test
        working-directory: ${{runner.workspace}}/build
        run: ctest --verbose --output-on-failure
  gnumake-clang-tidy-12-native:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++20 ]
        compiler: [ g++, clang++ ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install clang clang-tidy
      - name: gnumake-clang-tidy-12-native
        run: |
          cd .tidy/make
          echo "running clang-tidy"
          echo "make prepare -f make_tidy_01_generic.gmk MY_CC=${{ matrix.compiler }} MY_STD=${{ matrix.standard }}"
          echo
          make prepare -f make_tidy_01_generic.gmk MY_CC=${{ matrix.compiler }} MY_STD=${{ matrix.standard }}
          echo "make tidy -f make_tidy_01_generic.gmk --jobs=8 MY_CC=${{ matrix.compiler }} MY_STD=${{ matrix.standard }}"
          make tidy -f make_tidy_01_generic.gmk --jobs=8 MY_CC=${{ matrix.compiler }} MY_STD=${{ matrix.standard }}
          echo
          echo "verify empty word count of ./tmp/all.tidy_txt"
          wc ./tmp/all.tidy_txt | grep '0 0 0'
  mingw-winhost-x64:
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++ ]
        standard: [ c++11, c++14, c++17, c++2a ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: mingw-winhost-x64
        run: |
          echo compile ./soft_double.exe
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -m64 -std=${{ matrix.standard }} -I. examples/example001_roots_sqrt.cpp examples/example002b_pi_100k.cpp examples/example004_bessel_recur.cpp examples/example005_polylog_series.cpp examples/example007_catalan_series.cpp examples/example010_hypergeometric_2f1.cpp examples/example011_trig_trapezoid_integral.cpp test/test.cpp test/test_soft_double.cpp test/test_soft_double_edge_cases.cpp test/test_soft_double_examples.cpp test/test_soft_double_spot_values.cpp -o soft_double.exe
          dir .\soft_double.exe
          .\soft_double.exe
  gcc-clang-native-asan:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++-11, clang++ ]
        standard: [ c++11, c++14, c++17, c++20 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install g++-11
      - name: gcc-clang-native-asan
        run: |
          echo "compile ./soft_double.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -march=native -std=${{ matrix.standard }} -fsanitize=address -fsanitize=leak -I. examples/example001_roots_sqrt.cpp examples/example002b_pi_100k.cpp examples/example004_bessel_recur.cpp examples/example005_polylog_series.cpp examples/example007_catalan_series.cpp examples/example010_hypergeometric_2f1.cpp examples/example011_trig_trapezoid_integral.cpp test/test.cpp test/test_soft_double.cpp test/test_soft_double_edge_cases.cpp test/test_soft_double_examples.cpp test/test_soft_double_spot_values.cpp -o soft_double.exe
          ls -la ./soft_double.exe
          ./soft_double.exe
  gcc-clang-native-ubsan:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++-11, clang++ ]
        standard: [ c++11, c++14, c++17, c++20 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install g++-11
      - name: gcc-clang-native-ubsan
        run: |
          echo "compile ./soft_double.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -march=native -std=${{ matrix.standard }} -fsanitize=undefined -fsanitize=shift -fsanitize=shift-exponent -fsanitize=shift-base -fsanitize=integer-divide-by-zero -fsanitize=unreachable -fsanitize=vla-bound -fsanitize=null -fsanitize=return -fsanitize=signed-integer-overflow -fsanitize=bounds -fsanitize=alignment -fsanitize=object-size -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow -fsanitize=nonnull-attribute -fsanitize=returns-nonnull-attribute -fsanitize=bool -fsanitize=enum -fsanitize=vptr -I. examples/example001_roots_sqrt.cpp examples/example002b_pi_100k.cpp examples/example004_bessel_recur.cpp examples/example005_polylog_series.cpp examples/example007_catalan_series.cpp examples/example010_hypergeometric_2f1.cpp examples/example011_trig_trapezoid_integral.cpp test/test.cpp test/test_soft_double.cpp test/test_soft_double_edge_cases.cpp test/test_soft_double_examples.cpp test/test_soft_double_spot_values.cpp -o soft_double.exe
          ls -la ./soft_double.exe
          ./soft_double.exe
  apple-gcc-clang-native:
    runs-on: macos-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++, clang++ ]
        standard: [ c++11, c++14, c++17, c++20 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: apple-gcc-clang-native
        run: |
          echo "compile ./soft_double.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -march=native -O3 -std=${{ matrix.standard }} -I. examples/example001_roots_sqrt.cpp examples/example002b_pi_100k.cpp examples/example004_bessel_recur.cpp examples/example005_polylog_series.cpp examples/example007_catalan_series.cpp examples/example010_hypergeometric_2f1.cpp examples/example011_trig_trapezoid_integral.cpp test/test.cpp test/test_soft_double.cpp test/test_soft_double_edge_cases.cpp test/test_soft_double_examples.cpp test/test_soft_double_spot_values.cpp -o soft_double.exe
          ls -la ./soft_double.exe
          ./soft_double.exe
  msvc-release-x64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.2
      - name: msvc-release-x64
        shell: cmd
        working-directory: ./
        run: |
          MSBuild -m soft_double.sln -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir %cd%\x64\Release\soft_double.exe
          %cd%\x64\Release\soft_double.exe
  msvc-release-x64-vs2022:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - uses: actions/checkout@v1
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.3
      - name: msvc-release-x64-vs2022
        shell: cmd
        working-directory: ./
        run: |
          MSBuild -m soft_double_vs2022.sln -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir %cd%\x64\Release\soft_double_vs2022.exe
          %cd%\x64\Release\soft_double_vs2022.exe
