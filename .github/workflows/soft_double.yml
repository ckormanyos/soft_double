name: soft_double
on:
  push:
  schedule:
    - cron: '30 23 * * *' # run at 11:30 PM UTC
jobs:
  gcc-clang-native:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++, clang++ ]
        standard: [ c++11, c++14, c++17, c++2a ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: gcc-clang-native
        run: |
          echo "compile ./soft_double.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -finline-limit=32 -fno-exceptions -fno-rtti -march=native -mtune=native -O3 -Wall -Wextra -pedantic -std=${{ matrix.standard }} -I. examples/example001_roots_sqrt.cpp examples/example004_bessel_recur.cpp test/test.cpp test/test_soft_double.cpp test/test_soft_double_examples.cpp test/test_soft_double_with_decwide_t_100k_digit_pi.cpp -o soft_double.exe
          ls -la ./soft_double.exe
          ./soft_double.exe
  mingw-winhost-x64:
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++ ]
        standard: [ c++11, c++14, c++17, c++2a ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: mingw-winhost-x64
        run: |
          echo compile ./soft_double.exe
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -finline-limit=32 -fno-exceptions -fno-rtti -march=native -mtune=native -O3 -Wall -Wextra -pedantic -std=${{ matrix.standard }} -I. examples/example001_roots_sqrt.cpp examples/example004_bessel_recur.cpp test/test.cpp test/test_soft_double.cpp test/test_soft_double_examples.cpp test/test_soft_double_with_decwide_t_100k_digit_pi.cpp -o soft_double.exe
          dir .\soft_double.exe
          .\soft_double.exe
  gcc-clang-native-asan:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++, clang++ ]
        standard: [ c++11, c++14, c++17, c++2a ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: gcc-clang-native-asan
        run: |
          echo "compile ./soft_double.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -finline-limit=32 -fno-exceptions -fno-rtti -fsanitize=address -fsanitize=leak -march=native -mtune=native -O3 -Wall -Wextra -pedantic -std=${{ matrix.standard }} -I. examples/example001_roots_sqrt.cpp examples/example004_bessel_recur.cpp test/test.cpp test/test_soft_double.cpp test/test_soft_double_examples.cpp test/test_soft_double_with_decwide_t_100k_digit_pi.cpp -o soft_double.exe
          ls -la ./soft_double.exe
          ./soft_double.exe
  gcc-clang-native-ubsan:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++, clang++ ]
        standard: [ c++11, c++14, c++17, c++2a ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: gcc-clang-native-ubsan
        run: |
          echo "compile ./soft_double.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -finline-limit=32 -fno-exceptions -fno-rtti -fsanitize=undefined -fsanitize=shift -fsanitize=shift-exponent -fsanitize=shift-base -fsanitize=integer-divide-by-zero -fsanitize=unreachable -fsanitize=vla-bound -fsanitize=null -fsanitize=return -fsanitize=signed-integer-overflow -fsanitize=bounds -fsanitize=alignment -fsanitize=object-size -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow -fsanitize=nonnull-attribute -fsanitize=returns-nonnull-attribute -fsanitize=bool -fsanitize=enum -fsanitize=vptr -march=native -mtune=native -O3 -Wall -Wextra -pedantic -std=${{ matrix.standard }} -I. examples/example001_roots_sqrt.cpp examples/example004_bessel_recur.cpp test/test.cpp test/test_soft_double.cpp test/test_soft_double_examples.cpp test/test_soft_double_with_decwide_t_100k_digit_pi.cpp -o soft_double.exe
          ls -la ./soft_double.exe
          ./soft_double.exe
  gcc-clang-10:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++-10, clang++-10 ]
        standard: [ c++11, c++14, c++17, c++20 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install g++-10 clang-10
      - name: gcc-clang-10
        run: |
          echo "compile ./soft_double.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -finline-limit=32 -fno-exceptions -fno-rtti -march=native -mtune=native -O3 -Wall -Wextra -pedantic -std=${{ matrix.standard }} -I. examples/example001_roots_sqrt.cpp examples/example004_bessel_recur.cpp test/test.cpp test/test_soft_double.cpp test/test_soft_double_examples.cpp test/test_soft_double_with_decwide_t_100k_digit_pi.cpp -o soft_double.exe
          ls -la ./soft_double.exe
          ./soft_double.exe
  msvc-release-x64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
      - uses: ilammy/msvc-dev-cmd@v1
      - name: msvc-release-x64
        shell: cmd
        working-directory: ./
        run: |
          MSBuild -m soft_double.sln -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir %cd%\x64\Release\soft_double.exe
          %cd%\x64\Release\soft_double.exe
